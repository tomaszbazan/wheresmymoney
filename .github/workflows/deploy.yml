name: Build and Deploy Wheres My Money app

on:
  push:
    branches: [ "main" ]

env:
  BACKEND_IMAGE_NAME: ghcr.io/tomaszbazan/wheresmymoney-backend
  FRONTEND_IMAGE_NAME: ghcr.io/tomaszbazan/wheresmymoney-frontend
  IMAGE_TAG: latest
  FRONTEND_DIR: frontend
  BACKEND_CONTAINER_NAME: wheresmymoney-backend
  FRONTEND_CONTAINER_NAME: wheresmymoney-frontend
  BACKEND_BASE_URL: https://api.where.bazan.cloud/api

jobs:
  backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build backend
        run: |
          cd backend
          ./gradlew clean build -x test -x systemTest

      - name: Run unit tests
        run: |
          cd backend
          ./gradlew test -x systemTest 

      - name: Run integration tests
        run: |
          cd backend
          ./gradlew systemTest -x test

      - name: Run SpotBugs
        run: |
          cd backend 
          ./gradlew spotbugsMain

      - name: Run Checkstyle
        run: |
          cd backend
          ./gradlew checkstyleMain

      - name: SonarQube Analysis
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE_NAME }}:latest

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull ${{ env.BACKEND_IMAGE_NAME }}:latest

            # Stop and remove existing backend container
            docker ps -aq --filter "name=${{ env.BACKEND_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.BACKEND_CONTAINER_NAME }}
            docker ps -aq --filter "name=${{ env.BACKEND_CONTAINER_NAME }}" | grep -q . && docker rm ${{ env.BACKEND_CONTAINER_NAME }}

            # Start backend container
            docker run -d \
            --restart unless-stopped \
            -p 9080:9080 \
            --network host \
            --name ${{ env.BACKEND_CONTAINER_NAME }} \
            -e "SPRING_DATASOURCE_URL=${{ secrets.DATASOURCE_URL }}" \
            -e "SPRING_DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}" \
            -e "SPRING_DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" \
            -e "SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}" \
            ${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE_NAME }}:latest
          build-args: |
            BACKEND_BASE_URL=${{ env.BACKEND_BASE_URL }}
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull ${{ env.FRONTEND_IMAGE_NAME }}:latest

            # Stop and remove existing frontend container
            docker ps -aq --filter "name=${{ env.FRONTEND_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.FRONTEND_CONTAINER_NAME }}
            docker ps -aq --filter "name=${{ env.FRONTEND_CONTAINER_NAME }}" | grep -q . && docker rm ${{ env.FRONTEND_CONTAINER_NAME }}

            # Start frontend container
            docker run -d \
            --restart unless-stopped \
            -p 9081:9081 \
            --network host \
            --name ${{ env.FRONTEND_CONTAINER_NAME }} \
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}